#!/usr/bin/env bash
set -euxo pipefail

LOG="/var/log/startup-worker-cpu.log"
exec > >(tee -a "$LOG") 2>&1

retry() {
  local cmd="$1"; local max="${2:-5}"; local delay="${3:-6}"
  local n=0
  until bash -lc "$cmd"; do
    n=$((n+1))
    if [ "$n" -ge "$max" ]; then
      echo "ERROR: '$cmd' failed after $n attempts"
      return 1
    fi
    echo "retry $n/$max: $cmd"
    sleep "$delay"
  done
}

# -------- 1) Instalar Docker si no está --------
if ! command -v docker >/dev/null 2>&1; then
  export DEBIAN_FRONTEND=noninteractive
  retry "apt-get update -y" 5 8
  retry "apt-get install -y ca-certificates curl gnupg lsb-release" 5 8
  install -m 0755 -d /etc/apt/keyrings
  # agregar llave de Docker
  . /etc/os-release
  curl -fsSL "https://download.docker.com/linux/${ID}/gpg" | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  chmod a+r /etc/apt/keyrings/docker.gpg
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/${ID} \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  retry "apt-get update -y" 5 8
  retry "apt-get install -y docker-ce docker-ce-cli containerd.io" 5 8
fi
systemctl enable --now docker

# -------- 2) Variables y .env --------
mkdir -p /opt/worker-cpu

cat >/opt/worker-cpu/.env <<'ENV'
# --- RabbitMQ ILB interno ---
RABBITMQ_HOST=10.142.15.235
RABBITMQ_PORT=5672
RABBITMQ_USER=admin
RABBITMQ_PASSWORD=admin1234!
RABBITMQ_VHOST=/
RABBITMQ_QUEUE=pool.tasks

# --- Coordenador HTTP (por el Ingress) ---
# usa la IP pública del Ingress o tu dominio
COORDINATOR_URL=http://<IP_O_DOMINIO_INGRESS>/solved_task

# Identificador opcional del worker
WORKER_ID=${HOSTNAME}
ENV

# -------- 3) Ejecutar contenedor --------
IMAGE="facundootero/worker-cpu:2025-09-22"
# si usás Docker Hub: IMAGE="tuusuario/worker-cpu:<TAG>"

# pull tolerante (si es primera vez puede tardar)
retry "docker pull \"$IMAGE\"" 6 20 || true

# recrear
docker rm -f worker-cpu >/dev/null 2>&1 || true
retry "docker run -d --name worker-cpu --restart unless-stopped --env-file /opt/worker-cpu/.env \"$IMAGE\"" 6 10

# logs en background
pgrep -f "docker logs -f worker-cpu" >/dev/null || (docker logs -f worker-cpu >> /var/log/worker-cpu.log 2>&1 &)

# estado
docker ps --format '{{.Names}}\t{{.Image}}\t{{.Status}}' | grep -E '\bworker-cpu\b' || { echo "worker-cpu no quedó corriendo"; exit 1; }
echo "Startup OK"
