---
# ===========================================
# 1) ConfigMap - variables NO secretas
# ===========================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: coordinador-workers-config
  namespace: integrador
data:
  # Redis para heartbeats
  REDIS_HOST: "redis-integrador"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  HB_TTL_SEC: "45"

  # RabbitMQ para medir backlog (opcional autoscaling)
  RABBITMQ_HOST: "rabbitmq"
  RABBITMQ_PORT: "5672"
  RABBITMQ_USER: "admin"
  POOL_QUEUE: "pool.tasks"

  # Pol칤tica de autoscaling (si la us치s)
  ENABLE_AUTOSCALE: "true"
  CPU_BOOT_COUNT: "1"
  CHECK_BACKLOG_SEC: "15"
  MIN_BACKLOG_FOR_CPU: "2"
  ANTI_FLAP_SEC: "20"
  
# ---
# # ===========================================
# # 2) Secret - credenciales sensibles
# # ===========================================
# apiVersion: v1
# kind: Secret
# metadata:
#   name: coordinador-workers-secrets
#   namespace: integrador
# type: Opaque
# stringData:
#   RABBITMQ_PASSWORD: "admin1234!"   # <-- CAMBIAR
---
# sa-coordinador-workers.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coordinador-workers-sa
  namespace: integrador
  annotations:
    iam.gke.io/gcp-service-account: coordinador-workers-gsa@sdypp092025.iam.gserviceaccount.com
---
# ===========================================
# 3) Deployment - coordinador de workers (puerto 5003)
# ===========================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coordinador-workers
  namespace: integrador
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coordinador-workers
  template:
    metadata:
      labels:
        app: coordinador-workers
    spec:
      serviceAccountName: coordinador-workers-sa  
      containers:
        - name: app
          image: docker.io/facundootero/coordinador_worker_alive:v5
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5003
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            readOnlyRootFilesystem: true

          # 游녢 AQUI VA EL BLOQUE ENV
          env:
            # --- Autoscaling ---
            - name: ENABLE_AUTOSCALE
              value: "true"
            - name: CPU_BOOT_COUNT
              value: "1"
            - name: MIN_BACKLOG_FOR_CPU
              value: "2"
            - name: CHECK_BACKLOG_SEC
              value: "15"
            - name: ANTI_FLAP_SEC
              value: "20"

            # --- Redis (heartbeats) ---
            - name: REDIS_HOST
              value: "redis-integrador"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_DB
              value: "0"
            - name: HB_TTL_SEC
              value: "45"

            # --- RabbitMQ (backlog pool.tasks) ---
            - name: RABBITMQ_HOST
              value: "rabbitmq"
            - name: RABBITMQ_PORT
              value: "5672"
            - name: RABBITMQ_USER
              value: "admin"
            - name: RABBITMQ_PASSWORD
              value: "admin1234!"
            - name: POOL_QUEUE
              value: "pool.tasks"

            # --- MIG real en GCP ---
            - name: GCP_PROJECT
              value: "sdypp092025"
            - name: GCP_LOCATION        # zonal: us-central1-c | regional: us-central1
              value: "us-central1-c"
            - name: MIG_NAME
              value: "worker-cpu-mig"
            - name: MIG_SCOPE           # "zone" o "region"
              value: "zone"

          livenessProbe:
            httpGet:
              path: /status
              port: 5003
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /status
              port: 5003
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 3
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"

---
# ===========================================
# 4) Service - ClusterIP (para que lo consuma NGINX)
# ===========================================
apiVersion: v1
kind: Service
metadata:
  name: coordinador-workers
  namespace: integrador
spec:
  type: ClusterIP
  selector:
    app: coordinador-workers
  ports:
    - name: http
      port: 5003
      targetPort: 5003
---
# ===========================================
# 5) Ingress NGINX - expone /workers-hb/* hacia el Service
#    (whitelist del CIDR del MIG para que s칩lo entren tus workers)
# ===========================================
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coordinador-workers
  namespace: integrador
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    nginx.ingress.kubernetes.io/enable-real-ip: "true"
    # timeouts para robustez:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /workers-hb(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: coordinador-workers
                port:
                  name: http        # <--- antes ten칤as "number: 5003"


---
# ===========================================
# 6) (Opcional) NetworkPolicy: permitir s칩lo tr치fico desde el Ingress
#    - Ajust치 "ingress-nginx" si tu controller tiene otro namespace/label
# ===========================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-to-coordinador-workers
  namespace: integrador
spec:
  podSelector:
    matchLabels:
      app: coordinador-workers
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx   # <-- ns del Ingress Controller
      ports:
        - protocol: TCP
          port: 5003
