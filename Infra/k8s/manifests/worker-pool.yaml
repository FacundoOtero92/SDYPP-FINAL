apiVersion: v1
kind: Service
metadata:
  name: worker-pool
  namespace: integrador
  annotations:
    cloud.google.com/load-balancer-type: "Internal"   # IP interna para VMs GPU
spec:
  type: LoadBalancer
  selector: { app: worker-pool }
  ports:
    - name: http
      port: 5001
      targetPort: 5001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-pool
  namespace: integrador
spec:
  replicas: 1
  selector: { matchLabels: { app: worker-pool } }
  template:
    metadata: { labels: { app: worker-pool } }
    spec:
      # imagePullSecrets:
      #   - name: dockerhub-cred
      containers:
        - name: pool
          image: docker.io/facundootero/worker-pool:latest
          imagePullPolicy: Always
          ports: [{ containerPort: 5001 }]
          env:
            # RabbitMQ
            - { name: RABBITMQ_HOST, value: "rabbitmq" }
            - { name: RABBITMQ_USER, valueFrom: { secretKeyRef: { name: rabbitmq-auth, key: user } } }
            - { name: RABBITMQ_PASS, valueFrom: { secretKeyRef: { name: rabbitmq-auth, key: pass } } }
            # Inbox del pool
            - { name: POOL_EXCHANGE, value: "coordinator.inbox" }
            - { name: POOL_QUEUE,    value: "pool.tasks" }
            - { name: POOL_RK,       value: "tasks" }
            # Trabajo a workers
            - { name: EXCHANGE_BLOCK, value: "ExchangeBlock" }
            - { name: RK_GPU, value: "pow.gpu" }
            - { name: RK_CPU, value: "pow.cpu" }
            # TTL GPU→CPU (ms) y particionado
            - { name: GPU_TTL_MS,  value: "30000" }    # ajustá según p95 de tus GPU
            - { name: POOL_CHUNKS, value: "8" }        # cuántas subtareas generar
            # Dónde reenviar resultados
            - { name: COORDINATOR_URL, value: "http://coordinador-integrador:5000" }
          readinessProbe:
            httpGet: { path: /alive, port: 5001 }
            initialDelaySeconds: 5
          livenessProbe:
            httpGet: { path: /alive, port: 5001 }
            initialDelaySeconds: 10
