name: Terraform (GKE infra)

on:
  push:
    branches: [ main ]
    paths:
      - 'Infra/terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    paths:
      - 'Infra/terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch: {}

concurrency:
  group: tf-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  tf:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions: { id-token: write, contents: read }
    defaults:
      run:
        working-directory: Infra/terraform
    env:
      TF_VAR_project_id:   ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_region:       us-east1
      TF_VAR_vpc_name:     default
      TF_VAR_subnet_name:  default
      TF_VAR_create_dns_zone: "true"   # ponelo en "false" si NO querÃ©s que TF administre la zona
      TF_VAR_zone:         us-east1-c
      TF_VAR_pool_size:    "2"
      TF_VAR_worker_image: docker.io/facundootero/worker-cpu:latest

    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform

      - uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-tfplugins-${{ hashFiles('Infra/terraform/**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tfplugins-

      - name: Clear stale state lock (best-effort)
        run: |
          gcloud storage rm gs://bucket_estados_tf/infra/terraform/state/default.tflock || true

      - name: Terraform init (state remoto; no migrar)
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          rm -f terraform.tfstate terraform.tfstate.backup || true
          terraform init -migrate-state -force-copy -input=false -no-color

      - name: Terraform imports (router, DNS, subnet)
        run: |
          set -e
          # Router
          terraform state show google_compute_router.router >/dev/null 2>&1 || \
            terraform import -input=false google_compute_router.router \
              projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/routers/router || true

          # Zona DNS (si corresponde)
          terraform state show 'google_dns_managed_zone.svc[0]' >/dev/null 2>&1 || \
            terraform import -input=false 'google_dns_managed_zone.svc[0]' \
              projects/${{ secrets.GCP_PROJECT_ID }}/managedZones/svc-zone || true

          # Subred 'private' existente
          terraform state show google_compute_subnetwork.private >/dev/null 2>&1 || \
            terraform import -input=false google_compute_subnetwork.private \
              projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/subnetworks/private || true

       
              terraform state show google_compute_address.nat >/dev/null 2>&1 || \
                terraform import -input=false google_compute_address.nat \
                  projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/addresses/nat || true

            # NAT
            terraform state show google_compute_router_nat.nat >/dev/null 2>&1 || \
              terraform import -input=false google_compute_router_nat.nat \
                projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/routers/router/nats/nat || true


      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        if: github.event_name == 'pull_request'
        run: terraform plan -input=false -no-color -lock-timeout=5m

      - name: Terraform apply
        if: github.event_name != 'pull_request'
        run: terraform apply -input=false -auto-approve -no-color -lock-timeout=5m

      - name: Terraform outputs
        if: always()
        run: terraform output || true
